{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elhosnis\\\\Desktop\\\\full-stack-dep\\\\frontend\\\\src\\\\Root.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from \"react-router-dom\";\nimport Loginn from \"./Loginn\";\nimport App from \"./App\";\n\n// Wrapper for Loginn to handle navigation after login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginWrapper({\n  onLogin\n}) {\n  _s();\n  const navigate = useNavigate();\n  const handleLogin = foundUser => {\n    onLogin(foundUser.role);\n    if (foundUser.role === \"admin\") {\n      navigate(\"/admin\", {\n        replace: true\n      });\n    } else if (foundUser.role === \"user\") {\n      navigate(\"/user\", {\n        replace: true\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Loginn, {\n    onLogin: handleLogin\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n}\n_s(LoginWrapper, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginWrapper;\nexport default Root;\nvar _c;\n$RefreshReg$(_c, \"LoginWrapper\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","useNavigate","Loginn","App","jsxDEV","_jsxDEV","LoginWrapper","onLogin","_s","navigate","handleLogin","foundUser","role","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","Root","$RefreshReg$"],"sources":["C:/Users/elhosnis/Desktop/full-stack-dep/frontend/src/Root.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  Navigate,\r\n  useNavigate,\r\n} from \"react-router-dom\";\r\nimport Loginn from \"./Loginn\";\r\nimport App from \"./App\";\r\n\r\n\r\n\r\n// Wrapper for Loginn to handle navigation after login\r\nfunction LoginWrapper({ onLogin }) {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (foundUser) => {\r\n    onLogin(foundUser.role);\r\n    if (foundUser.role === \"admin\") {\r\n      navigate(\"/admin\", { replace: true });\r\n    } else if (foundUser.role === \"user\") {\r\n      navigate(\"/user\", { replace: true });\r\n    }\r\n  };\r\n\r\n  return <Loginn onLogin={handleLogin} />;\r\n}\r\n\r\nexport default Root;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,aAAa,IAAIC,MAAM,EACvBC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,WAAW,QACN,kBAAkB;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,GAAG,MAAM,OAAO;;AAIvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,YAAYA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,WAAW,GAAIC,SAAS,IAAK;IACjCJ,OAAO,CAACI,SAAS,CAACC,IAAI,CAAC;IACvB,IAAID,SAAS,CAACC,IAAI,KAAK,OAAO,EAAE;MAC9BH,QAAQ,CAAC,QAAQ,EAAE;QAAEI,OAAO,EAAE;MAAK,CAAC,CAAC;IACvC,CAAC,MAAM,IAAIF,SAAS,CAACC,IAAI,KAAK,MAAM,EAAE;MACpCH,QAAQ,CAAC,OAAO,EAAE;QAAEI,OAAO,EAAE;MAAK,CAAC,CAAC;IACtC;EACF,CAAC;EAED,oBAAOR,OAAA,CAACH,MAAM;IAACK,OAAO,EAAEG;EAAY;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzC;AAACT,EAAA,CAbQF,YAAY;EAAA,QACFL,WAAW;AAAA;AAAAiB,EAAA,GADrBZ,YAAY;AAerB,eAAea,IAAI;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}