{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elhosnis\\\\Desktop\\\\full-stack-dep\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport hpeLogo from \"./assets/hpe-logo.png\";\nimport { useNavigate, Routes, Route } from \"react-router-dom\";\nimport Loginn from \"./Loginn\";\nimport AdminPage from \"./AdminPage\";\nimport UserPage from \"./UserPage\";\n\n// .env \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction App({\n  mode,\n  onLogout\n}) {\n  _s();\n  const navigate = useNavigate();\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const [requests, setRequests] = useState([]);\n  const [bannedUsers, setBannedUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(\"all\");\n  const [user, setUser] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const harmfulWords = [\"badword1\", \"badword2\", \"spamword\"];\n  const containsHarmfulWord = text => {\n    const lowerText = text.toLowerCase();\n    return harmfulWords.some(word => lowerText.includes(word));\n  };\n\n  // handle login callback - navigate and set user\n  const handleLogin = user => {\n    setUser(user); // save user state\n    if (user.role === \"admin\") {\n      navigate(\"/admin\");\n    } else if (user.role === \"user\") {\n      navigate(\"/user\");\n    }\n  };\n\n  // Load initial requests and banned users once\n  useEffect(() => {\n    const initialRequests = [{\n      id: 1,\n      sender: \"user1\",\n      content: \"Hello!\",\n      timestamp: new Date(\"2025-07-21T10:00:00\")\n    }, {\n      id: 2,\n      sender: \"assistant\",\n      content: \"Hi! How can I assist you?\",\n      timestamp: new Date(\"2025-07-21T10:01:00\")\n    }, {\n      id: 3,\n      sender: \"user1\",\n      content: \"This is a badword1 message.\",\n      timestamp: new Date(\"2025-07-21T10:02:00\")\n    }, {\n      id: 4,\n      sender: \"user2\",\n      content: \"Hey! You are spamword!\",\n      timestamp: new Date(\"2025-07-21T10:03:00\")\n    }, {\n      id: 5,\n      sender: \"user3\",\n      content: \"Something’s not working.\",\n      timestamp: new Date(\"2025-07-21T10:04:00\")\n    }];\n    setRequests(initialRequests);\n    const usersToBan = [...new Set(initialRequests.filter(r => r.sender !== \"assistant\" && containsHarmfulWord(r.content)).map(r => r.sender))];\n    setBannedUsers(usersToBan);\n  }, []);\n\n  // Fetch chat history when user changes\n  useEffect(() => {\n    if (user) {\n      fetch(`http://localhost:8083/chat-history/${user.id}`).then(res => res.json()).then(data => setChatHistory(data)).catch(err => console.error(\"Failed to fetch history\", err));\n    }\n  }, [user]);\n  const toggleBanUser = sender => {\n    setBannedUsers(prev => prev.includes(sender) ? prev.filter(u => u !== sender) : [...prev, sender]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const res = await fetch(\"http://localhost:5000/query\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: question\n        })\n      });\n      const data = await res.json();\n      const responseText = data.response;\n      setAnswer(responseText);\n\n      // Save history to Spring Boot backend\n      await fetch(\"http://localhost:8083/chat-history\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sender: user.username,\n          content: question,\n          timestamp: new Date().toISOString()\n        })\n      });\n    } catch (err) {\n      setAnswer(\"Failed to get response from AI assistant.\");\n    }\n  };\n  const uniqueSenders = [...new Set(requests.map(r => r.sender))].filter(s => s !== \"assistant\");\n  const filteredRequests = selectedUser === \"all\" ? requests : requests.filter(r => r.sender === selectedUser);\n\n  // ROUTES and UI\n\n  // If user is not logged in, redirect to login route or show login component\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/*\",\n        element: /*#__PURE__*/_jsxDEV(Loginn, {\n          onLogin: handleLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Show user interface based on role\n  if (user.role === \"user\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n  if (user.role === \"admin\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n}\n_s(App, \"ZiMeWF1mue9NuNOfstNznuXVYUQ=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","hpeLogo","useNavigate","Routes","Route","Loginn","AdminPage","UserPage","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","App","mode","onLogout","_s","navigate","question","setQuestion","answer","setAnswer","requests","setRequests","bannedUsers","setBannedUsers","selectedUser","setSelectedUser","user","setUser","chatHistory","setChatHistory","harmfulWords","containsHarmfulWord","text","lowerText","toLowerCase","some","word","includes","handleLogin","role","initialRequests","id","sender","content","timestamp","Date","usersToBan","Set","filter","r","map","fetch","then","res","json","data","catch","err","console","error","toggleBanUser","prev","u","handleSubmit","e","preventDefault","method","headers","body","JSON","stringify","prompt","responseText","response","username","toISOString","uniqueSenders","s","filteredRequests","children","path","element","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/elhosnis/Desktop/full-stack-dep/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport hpeLogo from \"./assets/hpe-logo.png\";\r\nimport { useNavigate, Routes, Route } from \"react-router-dom\";\r\nimport Loginn from \"./Loginn\";\r\nimport AdminPage from \"./AdminPage\";\r\nimport UserPage from \"./UserPage\";\r\n\r\n// .env \r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction App({ mode, onLogout }) {\r\n  const navigate = useNavigate();\r\n\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [requests, setRequests] = useState([]);\r\n  const [bannedUsers, setBannedUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(\"all\");\r\n  const [user, setUser] = useState(null);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n\r\n  const harmfulWords = [\"badword1\", \"badword2\", \"spamword\"];\r\n  const containsHarmfulWord = (text) => {\r\n    const lowerText = text.toLowerCase();\r\n    return harmfulWords.some((word) => lowerText.includes(word));\r\n  };\r\n\r\n  // handle login callback - navigate and set user\r\n  const handleLogin = (user) => {\r\n    setUser(user); // save user state\r\n    if (user.role === \"admin\") {\r\n      navigate(\"/admin\");\r\n    } else if (user.role === \"user\") {\r\n      navigate(\"/user\");\r\n    }\r\n  };\r\n\r\n  // Load initial requests and banned users once\r\n  useEffect(() => {\r\n    const initialRequests = [\r\n      { id: 1, sender: \"user1\", content: \"Hello!\", timestamp: new Date(\"2025-07-21T10:00:00\") },\r\n      { id: 2, sender: \"assistant\", content: \"Hi! How can I assist you?\", timestamp: new Date(\"2025-07-21T10:01:00\") },\r\n      { id: 3, sender: \"user1\", content: \"This is a badword1 message.\", timestamp: new Date(\"2025-07-21T10:02:00\") },\r\n      { id: 4, sender: \"user2\", content: \"Hey! You are spamword!\", timestamp: new Date(\"2025-07-21T10:03:00\") },\r\n      { id: 5, sender: \"user3\", content: \"Something’s not working.\", timestamp: new Date(\"2025-07-21T10:04:00\") },\r\n    ];\r\n    setRequests(initialRequests);\r\n\r\n    const usersToBan = [\r\n      ...new Set(\r\n        initialRequests\r\n          .filter((r) => r.sender !== \"assistant\" && containsHarmfulWord(r.content))\r\n          .map((r) => r.sender)\r\n      ),\r\n    ];\r\n    setBannedUsers(usersToBan);\r\n  }, []);\r\n\r\n  // Fetch chat history when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetch(`http://localhost:8083/chat-history/${user.id}`)\r\n        .then((res) => res.json())\r\n        .then((data) => setChatHistory(data))\r\n        .catch((err) => console.error(\"Failed to fetch history\", err));\r\n    }\r\n  }, [user]);\r\n\r\n  const toggleBanUser = (sender) => {\r\n    setBannedUsers((prev) =>\r\n      prev.includes(sender) ? prev.filter((u) => u !== sender) : [...prev, sender]\r\n    );\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/query\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ prompt: question }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      const responseText = data.response;\r\n      setAnswer(responseText);\r\n\r\n      // Save history to Spring Boot backend\r\n      await fetch(\"http://localhost:8083/chat-history\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          sender: user.username,\r\n          content: question,\r\n          timestamp: new Date().toISOString(),\r\n        }),\r\n      });\r\n\r\n    } catch (err) {\r\n      setAnswer(\"Failed to get response from AI assistant.\");\r\n    }\r\n  };\r\n\r\n  const uniqueSenders = [...new Set(requests.map((r) => r.sender))].filter(\r\n    (s) => s !== \"assistant\"\r\n  );\r\n\r\n  const filteredRequests =\r\n    selectedUser === \"all\"\r\n      ? requests\r\n      : requests.filter((r) => r.sender === selectedUser);\r\n\r\n  // ROUTES and UI\r\n\r\n  // If user is not logged in, redirect to login route or show login component\r\n  if (!user) {\r\n    return <Routes>\r\n      <Route path=\"/*\" element={<Loginn onLogin={handleLogin} />} />\r\n    </Routes>;\r\n  }\r\n\r\n  // Show user interface based on role\r\n  if (user.role === \"user\") {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* ... Your user UI with chat history sidebar ... */}\r\n        {/* You can copy your existing user-mode UI here */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (user.role === \"admin\") {\r\n    return (\r\n      <div className=\"container\">\r\n        {/* ... Your admin UI ... */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}